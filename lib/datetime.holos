nowVal = function
	return _dateVal
end function


now = function(format="yyyy-MM-dd HH:mm:ss")
	return _dateStr(_dateVal, format)
end function


str = function(date, format="yyyy-MM-dd HH:mm:ss")
	return _dateStr(date, format)
end function


val = function(dateStr)
	return _dateVal(dateStr)
end function


year = function(date)
	return _dateStr(date, "yyyy").val
end function


month = function(date)
	return _dateStr(date, "%M").val
end function


day = function(date)
	return _dateStr(date, "%d").val
end function


hour = function(date)
	return _dateStr(date, "%H").val
end function


minute = function(date)
	return _dateStr(date, "%m").val
end function


second = function(date)
	return _dateStr(date, "%s").val
end function


weekdayNames = "Sun Mon Tue Wed Thu Fri Sat".split


weekday = function(date)
	return weekdayNames.indexOf(_dateStr(date, "ddd"))
end function

runUnitTests = function
	printsc "It is now: " + now
	printsc "Unit testing: dateTime"
	
	errorCount = 0
	assertEqual = function(actual, expected, note)
		if actual != expected then
			printsc "Unit test failure (" + note + "): expected " + expected + ", got " + actual
			outer.errorCount = errorCount + 1
		end if
	end function
	
	dstr = "1971-10-29 01:23:45"
	dval = val(dstr)
	assertEqual dval, -889137375
	assertEqual year(dval), 1971, "year (from val)"
	assertEqual month(dval), 10, "month (from val)"
	assertEqual day(dval), 29, "day (from val)"
	assertEqual hour(dval), 1, "hour (from val)"
	assertEqual minute(dval), 23, "minute (from val)"
	assertEqual second(dval), 45, "second (from val)"
	assertEqual weekday(dval), 5, "weekday (from val)"  // (Friday)

	assertEqual year(dstr), 1971, "year (from str)"
	assertEqual month(dstr), 10, "month (from str)"
	assertEqual day(dstr), 29, "day (from str)"
	assertEqual hour(dstr), 1, "hour (from str)"
	assertEqual minute(dstr), 23, "minute (from str)"
	assertEqual second(dstr), 45, "second (from str)"
	assertEqual weekday(dstr), 5, "weekday (from str)"  // (Friday)
	
	nextDay = str(dval + 24*60*60)
	assertEqual nextDay, "1971-10-30 01:23:45"
	
	if errorCount == 0 then
		printsc "All tests passed.  Happy day!"
	else
		printsc errorCount + " error" + "s" * (errorCount!=1) + " found."
	end if
end function


if locals == globals then
	runUnitTests

	dateTime = {"str":@str, "val":@val}
	globals.remove "str"
	globals.remove "val"
end if
	
