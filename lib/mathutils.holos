e = 2.7182818284


ln = function(x)
	return log(x, 2.7182818284)
end function


radToDeg = function(radians)
	return radians * 180 / pi
end function

degToRad = function(degrees)
	return degrees * pi / 180
end function


moveTowards = function(num, targetNum, maxChange=1)
	if abs(targetNum - num) <= maxChange then return targetNum
	if targetNum > num then return num + maxChange
	return num - maxChange
end function


moveTowardsXY = function(mover, target, maxDist=1)
	dx = target.x - mover.x
	dy = target.y - mover.y
	if dx == 0 and dy == 0 then return false  // already there
	dist = sqrt(dx^2 + dy^2)
	if dist < maxDist then
		mover.x = target.x
		mover.y = target.y
	else
		f = maxDist / dist
		mover.x = mover.x + dx * f
		mover.y = mover.y + dy * f
	end if
	return true   // moved, at least a little
end function


distance = function(p1, p2)
	if p1 isa map then
		x1 = p1.x
		y1 = p1.y
	else
		x1 = p1[0]
		y1 = p1[1]
	end if
	if p2 isa map then
		x2 = p2.x
		y2 = p2.y
	else
		x2 = p2[0]
		y2 = p2[1]
	end if	
	return sqrt((x1-x2)^2 + (y1-y2)^2)
end function


lerp = function(a, b, t)
	return a + (b-a) * t
end function


lerp2d = function(p1, p2, t)
	if p1 isa map then
		x1 = p1.x
		y1 = p1.y
	else
		x1 = p1[0]
		y1 = p1[1]
	end if
	if p2 isa map then
		x2 = p2.x
		y2 = p2.y
	else
		x2 = p2[0]
		y2 = p2[1]
	end if	
	return [x1 + (x2-x1) * t, y1 + (y2-y1) * t]
end function

if intrinsics.hasIndex("_proportionAlongLine") then
	

	proportionAlongLine = function(endA, endB, p)
		return _proportionAlongLine(endA, endB, p)
	end function
	

	nearestPointOnLine = function(endA, endB, p)
		return _nearestPointOnLine(endA, endB, p)
	end function
	

	nearestPointOnLineSegment = function(endA, endB, p)
		return _nearestPointOnLineSegment(endA, endB, p)
	end function
	

	distanceToLine = function(endA, endB, p)
		ptOnLine = _nearestPointOnLine(endA, endB, p)
		return distance(p, ptOnLine)
	end function
	

	distanceToLineSegment = function(endA, endB, p)
		ptOnLine = _nearestPointOnLineSegment(endA, endB, p)
		return distance(p, ptOnLine)
	end function
	

	lineIntersectProportion = function(p1, p2, p3, p4)
		return _lineIntersectProportion(p1, p2, p3, p4)
	end function
	

	lineSegmentsIntersect = function(p1, p2, p3, p4)
		return _lineSegmentsIntersect(p1, p2, p3, p4)
	end function
	

	lineLineIntersection = function(p1, p2, p3, p4)
		return _lineLineIntersection(p1, p2, p3, p4)
	end function
end if

if intrinsics.hasIndex("_polyPerimeter") then


	polyPerimeter = function(polygon)
		return _polyPerimeter(polygon)
	end function
	

	polyArea = function(polygon)
		return _polyArea(polygon)
	end function
	

	pointInPoly = function(point, polygon)
		return _pointInPoly(point, polygon)
	end function
	

	offsetPoly = function(polygon, delta)
		return _offsetPoly(polygon, delta)
	end function
	

	shiftPoly = function(polygon, dx=0, dy=0)
		return _translatePoly(polygon, dx, dy)
	end function

	rotatePoly = function(polygon, degrees)
		return _rotatePoly(polygon, degrees)
	end function
end if


randNormal = function(mean=0, stddev=1)
    return mean + sqrt(-2 * log(rnd,2.7182818284)) * cos(2*pi*rnd) * stddev
end function


randRange = function(min, max)
	return min + (max - min) * rnd
end function


dice = function(numberOfDice=1, sides=6)
	sum = 0
	for i in range(1, numberOfDice)
		sum = sum + ceil(rnd * sides)
	end for
	return sum
end function

// clamp: limits the given value to a specified range.
clamp = function(x, minval=0, maxval=1)
	if x < minval then return minval
	if x > maxval then return maxval
	return x
end function


max = function(a, b)
	if b > a then return b else return a
end function


min = function(a, b)
	if b < a then return b else return a
end function


numToStr = function(n, precision=null)
	if precision == null then return str(n)
	if not n isa number or not precision isa number then
		printsc "numToStr error: arguments must be numbers."
		return
	end if
	if precision <= 0 or n == 1/0 or n == -1/0 or n != n then return str(round(n, precision))
	negative = n < 0; n = abs(n)
	digits = [floor(n)]
	for i in range(1, precision)
		d = floor(n * 10^i) % 10
		digits.push d
	end for
	if (n * 10^precision) % 1 >= 0.5 then
		for i in range(digits.len - 1)
			digits[i] += 1
			if digits[i] < 10 or i == 0 then break
			digits[i] = 0
		end for
	end if
	return "-" * negative + digits.pull + "." + digits.join("")
end function

runUnitTests = function
	printsc "Unit testing: mathUtil"
	
	errorCount = 0
	assertEqual = function(actual, expected, note)
		if actual != expected then
			printsc "Unit test failure (" + note + "): expected " + expected + ", got " + actual
			outer.errorCount = errorCount + 1
		end if
	end function
	
	if intrinsics.hasIndex("_polyPerimeter") then
		quadPoly = [[0,0], [100,0], [100,50], [0,50]]
		assertEqual polyPerimeter(quadPoly), 300, "polyPerimeter"
		assertEqual polyArea(quadPoly), 5000, "polyArea"
	end if
	
	if intrinsics.hasIndex("_proportionAlongLine") then
		endA = [100,50]
		endB = {"x":100, "y":150}
		assertEqual proportionAlongLine(endA, endB, [200,100]), 0.5, "proportionAlongLine"
		assertEqual nearestPointOnLine(endA, endB, [200,100]), [100,100], "nearestPointOnLine"
		assertEqual nearestPointOnLineSegment(endA, endB, [200,100]), [100,100], "nearestPointOnLineSegment"
		assertEqual nearestPointOnLine(endA, endB, [100,10]), [100,10], "nearestPointOnLine"
		assertEqual nearestPointOnLineSegment(endA, endB, [100,10]), [100,50], "nearestPointOnLineSegment"
		assertEqual distanceToLine(endA, endB, [200,80]), 100, "nearestPointOnLine"
		assertEqual distanceToLineSegment(endA, endB, [100,200]), 50, "nearestPointOnLineSegment"
	
		endA2 = {"x":80, "y":70}
		endB2 = [120, 70]
		assertEqual lineSegmentsIntersect(endA, endB, endA2, endB2), true, "lineSegmentsIntersect"
		assertEqual round(lineIntersectProportion(endA, endB, endA2, endB2),2), 0.20, "proportionAlongLine"
		assertEqual lineLineIntersection(endA, endB, endA2, endB2), [100,70], "lineLineIntersection"
	end if
	
	assertEqual moveTowards(100, 25, 10), 90, "moveTowards"
	mover = {"x":50, "y":25}
	target = {"x":60, "y":25}
	assertEqual moveTowardsXY(mover, target), true
	assertEqual mover.x, 51, "moveTowardsXY"
	assertEqual mover.y, 25, "moveTowardsXY"
	target = {"x":51, "y":30}
	assertEqual moveTowardsXY(mover, target, 10), true
	assertEqual mover.x, 51, "moveTowardsXY"
	assertEqual mover.y, 30, "moveTowardsXY"
	assertEqual moveTowardsXY(mover, target, 10), false
	
	assertEqual numToStr(pi, 2), "3.14", "numToStr"
	assertEqual numToStr(pi, 4), "3.1416", "numToStr"
	assertEqual numToStr(pi, 12), "3.141592653590", "numToStr"
	assertEqual numToStr(1.23, 3), "1.230", "numToStr"
	assertEqual numToStr(1.23), "1.23", "numToStr"
	assertEqual numToStr(12345.67, -2), "12300", "numToStr"
	assertEqual numToStr(2, 3), "2.000", "numToStr"
	assertEqual numToStr(2/3, 12), "0.666666666667", "numToStr"
	assertEqual numToStr(41.9999, 2), "42.00", "numToStr"
	assertEqual numToStr(42 - 1E-12, 5), "42.00000", "numToStr"
	assertEqual numToStr(-pi, 4), "-3.1416", "numToStr"
	
	if errorCount == 0 then
		printsc "All tests passed.  Woot!"
	else
		printsc errorCount + " error" + "s" * (errorCount!=1) + " found."
	end if
end function

if globals == locals then runUnitTests
