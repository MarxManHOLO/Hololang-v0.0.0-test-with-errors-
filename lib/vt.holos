esc = char(27)


bold = esc + "[1m"
dim = esc + "[2m"
underline = esc + "[4m"  
blink = esc + "[5m"
inverse = esc + "[7m"
invisible = esc + "[8m"
normal = esc + "[m"		

_hexVal = function(s)
	result = 0
	for c in s.upper
		digitVal = "0123456789ABCDEF".indexOf(c)
		result = result * 16 + digitVal
	end for
	return result
end function

_closestAnsiPaletteIndex = function(r, g, b)
	if r == g == b then
		
		if r < 8 then return 232
		if r > 248 then return 255
		return 232 + round(((r - 8) / 247) * 24)
	end if
	
	return 16 + (36 * round(r/255*5)) + (6 * round(g / 255 * 5)) + round(b / 255 * 5)
end function

_getColorIndex = function(c)
	if c isa number then
		return c
	else if c isa list then
		return _closestAnsiPaletteIndex(c[0], c[1], c[2])
	else if c isa string then
		if c[0] == "#" then c = c[1:]
		r = _hexVal(c[0:2])
		g = _hexVal(c[2:4])
		b = _hexVal(c[4:6])
		return _closestAnsiPaletteIndex(r, g, b)
	end if
	return 0
end function


textColor = function(c)
	return esc + "[38;5;" + _getColorIndex(c) + "m"
end function


backColor = function(c)
	return esc + "[48;5;" + _getColorIndex(c) + "m"
end function


color = {}
color.aqua = 51
color.black = 232
color.blue = 21
color.brown = 137
color.fuchsia = 201
color.gray = 244
color.green = 34
color.lime = 46
color.maroon = 124
color.navy = 19
color.olive = 142
color.orange = 214
color.pink = 217
color.purple = 127
color.red = 196
color.silver = 250
color.teal = 37
color.white = 255
color.yellow = 226


cursor = {}
cursor.up = function(n=1); return esc + "[" + n + "A"; end function
cursor.down = function(n=1); return esc + "[" + n + "B"; end function
cursor.left = function(n=1); return esc + "[" + n + "D"; end function
cursor.right = function(n=1); return esc + "[" + n + "C"; end function
cursor.nextLine = esc + "E"
cursor.home = esc + "[f"		
cursor.save = esc + "7"
cursor.restore = esc + "8"

cursor.goto = function(row,col); return esc + "[" + row + ";" + col + "H"; end function


tab = {}
tab.set = esc + "H"			
tab.clear = esc + "[g"		
tab.clearAll = esc + "[3g"	


bigTextTop = esc + "#3"
bigTextBottom = esc + "#4"

wide = esc + "#6"

normalSize = esc + "#5"


clear = esc + "[2J"
clearLineToRight = esc + "[K"
clearLineToLeft = esc + "[1K"
clearLine = esc + "[2K"
clearBelow = esc + "[J"
clearAbove = esc + "[1J"
reset = esc + "c"  


ledOn = function(n=1)
	return esc + "[" + n + "q"
end function
ledsOff = ledOn(0)

demo = function
	printsc reset + clear + cursor.home
	printsc " " * 20 + bold + underline + "vt module demo" + normal
	
	printsc
	printsc underline + "Character Styles" + normal
	printsc "vt.bold:      " + bold + "boldface text" + normal
	printsc "vt.dim:       " + dim + "dim text" + normal
	printsc "vt.underline: " + underline + "underlined text" + normal
	printsc "vt.blink:     " + blink + "blinking text" + normal
	printsc "vt.inverse:   " + inverse + "inverse text" + normal
	printsc "vt.invisible: " + invisible + "invisible text" + normal
	printsc "vt.normal:    undoes any of the above"

	printsc; printsc
	printsc underline + "Text Sizes" + normal
	printsc bigTextTop + "bigTextTop and bigTextBottom 12345"
	printsc bigTextBottom + "bigTextTop and bigTextBottom 67890"
	printsc wide + "wide (but normal height)"
	printsc normalSize + "normalSize"

	printsc; printsc
	printsc cursor.save

	colorNames = color.indexes
	colorNames.sort
	y = 2; x = 56
	for i in colorNames.indexes
		c = colorNames[i]
		idx = color[c]
		if idx > 180 and idx != 232 then idx2 = 232 else idx2 = 255
		printsc cursor.goto(y, x) + backColor(idx) + textColor(idx2), ""
		printsc ("   " + idx)[-3:], ""
		if idx != 232 then idx2 = 232
		printsc textColor(idx) + backColor(idx2) + " " + c
		y += 1
		if y > 11 then; y = 2; x += 13; end if
	end for

	printsc bold + cursor.goto(7,45) + "*"
	for ang in range(0,360*5,10)
		row = round(7 + 4*sin(ang*pi/180))
		col = round(45 + 8*cos(ang*pi/180))
		printsc cursor.goto(row,col) + bold + "*" + normal + cursor.restore
		wait 0.02
		printsc cursor.goto(row,col) + dim + "." + normal + cursor.restore
	end for
	
	printsc; printsc
end function



if locals == globals then demo
